// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: version.ext.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "VersionExt.pbobjc.h"
#import "CommonExt.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PB3VersionExtRoot

@implementation PB3VersionExtRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PB3VersionExtRoot_FileDescriptor

static GPBFileDescriptor *PB3VersionExtRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pb"
                                                 objcPrefix:@"PB3"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PB3ForceUpdate

GPBEnumDescriptor *PB3ForceUpdate_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ForceZero\000ForceTrue\000ForceFalse\000";
    static const int32_t values[] = {
        PB3ForceUpdate_ForceZero,
        PB3ForceUpdate_ForceTrue,
        PB3ForceUpdate_ForceFalse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3ForceUpdate)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3ForceUpdate_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3ForceUpdate_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3ForceUpdate_ForceZero:
    case PB3ForceUpdate_ForceTrue:
    case PB3ForceUpdate_ForceFalse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum PB3HasInstall

GPBEnumDescriptor *PB3HasInstall_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "InstallZero\000InstallTrue\000InstallFalse\000";
    static const int32_t values[] = {
        PB3HasInstall_InstallZero,
        PB3HasInstall_InstallTrue,
        PB3HasInstall_InstallFalse,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PB3HasInstall)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PB3HasInstall_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PB3HasInstall_IsValidValue(int32_t value__) {
  switch (value__) {
    case PB3HasInstall_InstallZero:
    case PB3HasInstall_InstallTrue:
    case PB3HasInstall_InstallFalse:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PB3GetLastVersionReq

@implementation PB3GetLastVersionReq

@dynamic version;
@dynamic platform;

typedef struct PB3GetLastVersionReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *version;
  NSString *platform;
} PB3GetLastVersionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLastVersionReq_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetLastVersionReq__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "platform",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLastVersionReq_FieldNumber_Platform,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetLastVersionReq__storage_, platform),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetLastVersionReq class]
                                     rootClass:[PB3VersionExtRoot class]
                                          file:PB3VersionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetLastVersionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetLastVersionRes

@implementation PB3GetLastVersionRes

@dynamic version;
@dynamic forceUpdate;
@dynamic remark;
@dynamic pkg;
@dynamic hasInstall;
@dynamic date;

typedef struct PB3GetLastVersionRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ForceUpdate forceUpdate;
  PB3HasInstall hasInstall;
  NSString *version;
  NSString *remark;
  NSString *pkg;
  NSString *date;
} PB3GetLastVersionRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLastVersionRes_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetLastVersionRes__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "forceUpdate",
        .dataTypeSpecific.enumDescFunc = PB3ForceUpdate_EnumDescriptor,
        .number = PB3GetLastVersionRes_FieldNumber_ForceUpdate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3GetLastVersionRes__storage_, forceUpdate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "remark",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLastVersionRes_FieldNumber_Remark,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PB3GetLastVersionRes__storage_, remark),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pkg",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLastVersionRes_FieldNumber_Pkg,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PB3GetLastVersionRes__storage_, pkg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hasInstall",
        .dataTypeSpecific.enumDescFunc = PB3HasInstall_EnumDescriptor,
        .number = PB3GetLastVersionRes_FieldNumber_HasInstall,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PB3GetLastVersionRes__storage_, hasInstall),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetLastVersionRes_FieldNumber_Date,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PB3GetLastVersionRes__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetLastVersionRes class]
                                     rootClass:[PB3VersionExtRoot class]
                                          file:PB3VersionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetLastVersionRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PB3GetLastVersionRes_ForceUpdate_RawValue(PB3GetLastVersionRes *message) {
  GPBDescriptor *descriptor = [PB3GetLastVersionRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetLastVersionRes_FieldNumber_ForceUpdate];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetLastVersionRes_ForceUpdate_RawValue(PB3GetLastVersionRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetLastVersionRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetLastVersionRes_FieldNumber_ForceUpdate];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PB3GetLastVersionRes_HasInstall_RawValue(PB3GetLastVersionRes *message) {
  GPBDescriptor *descriptor = [PB3GetLastVersionRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetLastVersionRes_FieldNumber_HasInstall];
  return GPBGetMessageInt32Field(message, field);
}

void SetPB3GetLastVersionRes_HasInstall_RawValue(PB3GetLastVersionRes *message, int32_t value) {
  GPBDescriptor *descriptor = [PB3GetLastVersionRes descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PB3GetLastVersionRes_FieldNumber_HasInstall];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PB3InstallReportReq

@implementation PB3InstallReportReq

@dynamic version;
@dynamic device;

typedef struct PB3InstallReportReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *version;
  NSString *device;
} PB3InstallReportReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = PB3InstallReportReq_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3InstallReportReq__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "device",
        .dataTypeSpecific.className = NULL,
        .number = PB3InstallReportReq_FieldNumber_Device,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PB3InstallReportReq__storage_, device),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InstallReportReq class]
                                     rootClass:[PB3VersionExtRoot class]
                                          file:PB3VersionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3InstallReportReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3InstallReportRes

@implementation PB3InstallReportRes


typedef struct PB3InstallReportRes__storage_ {
  uint32_t _has_storage_[1];
} PB3InstallReportRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3InstallReportRes class]
                                     rootClass:[PB3VersionExtRoot class]
                                          file:PB3VersionExtRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(PB3InstallReportRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetViewHideInfoReq

@implementation PB3GetViewHideInfoReq

@dynamic id_p;

typedef struct PB3GetViewHideInfoReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
} PB3GetViewHideInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PB3GetViewHideInfoReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetViewHideInfoReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetViewHideInfoReq class]
                                     rootClass:[PB3VersionExtRoot class]
                                          file:PB3VersionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetViewHideInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PB3GetViewHideInfoRes

@implementation PB3GetViewHideInfoRes

@dynamic hasInfo, info;

typedef struct PB3GetViewHideInfoRes__storage_ {
  uint32_t _has_storage_[1];
  PB3ViewHideInfo *info;
} PB3GetViewHideInfoRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "info",
        .dataTypeSpecific.className = GPBStringifySymbol(PB3ViewHideInfo),
        .number = PB3GetViewHideInfoRes_FieldNumber_Info,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PB3GetViewHideInfoRes__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PB3GetViewHideInfoRes class]
                                     rootClass:[PB3VersionExtRoot class]
                                          file:PB3VersionExtRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PB3GetViewHideInfoRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
